{
    "nav": {
      "title": "Claude MCP",
      "servers": "服务器",
      "clients": "客户端",
      "playground": "实验场",
      "inspector": "调试器",
      "documentation": "文档",
      "blog": "博客",
      "specification": "协议规范",
      "community": "社区",
      "getting_started": "入门指南",
      "guides": "使用指南",
      "advanced": "高级主题",
      "open_menu": "打开菜单",
      "close_menu": "关闭菜单",
      "items": {
        "introduction": "简介",
        "installation": "安装",
        "quick_start": "快速开始",
        "resources": "资源管理",
        "tools": "工具集成",
        "messages": "消息格式",
        "security": "安全性",
        "deployment": "部署",
        "configuration": "配置"
      }
    },
    "Blog": {
      "common": {
        "searchPlaceholder": "搜索文章...",
        "allCategories": "全部分类",
        "noResults": "未找到符合条件的文章",
        "readMore": "阅读更多",
        "backToBlog": "返回博客列表",
        "shareArticle": "分享这篇文章",
        "copyLink": "复制链接",
        "linkCopied": "链接已复制到剪贴板",
        "relatedPosts": "相关文章",
        "scrollToTop": "返回顶部",
        "readingTime": "阅读时间",
        "minutesRead": "分钟阅读",
        "tableOfContents": "目录",
        "loadingToc": "正在加载目录..."
      },
      "meta": {
        "title": "MCP 博客",
        "description": "探索我们关于技术、AI、编程和最佳实践的最新文章和见解"
      },
      "page": {
        "title": "博客洞见",
        "description": "探索我们关于技术、人工智能、编程和最佳实践的最新文章和见解，帮助您构建更智能的应用"
      }
    },
    "home": {
      "title": "全球技术社区",
      "description": "Anthropic MCP协议文档、开发者资源和社区协作的首选平台。",
      "getStarted": "开始使用",
      "joinCommunity": "加入社区",
      "latestDocs": {
        "title": "Claude MCP 最新学习文档",
        "description": "及时了解我们最新的 Claude MCP 文档和学习教程",
        "noDate": "暂无日期",
        "viewAll": "查看全部文档"
      }
    },
    "HomePage": {
      "latestBlog": {
        "title": "最新博客文章",
        "description": "阅读我们关于 Claude MCP、AI 技术和开发实践的最新见解和教程",
        "viewAll": "查看全部文章"
      }
    },
    "Index": {
      "meta": {
        "title": "Claude MCP 社区",
        "description": "Claude MCP 是一个开放的协议标准，用于在AI模型和开发环境之间建立统一的上下文交互，claudemcp.com 是 MCP 的社区网站，提供 MCP 的文档、示例代码、服务器目录和最佳实践。",
        "keywords": "AI, 协议, 上下文, 开发环境, Claude",
        "og": {
          "title": "Claude MCP 社区",
          "description": "Claude MCP 是一个开放的协议标准，用于在AI模型和开发环境之间建立统一的上下文交互，claudemcp.com 是 MCP 的社区网站，提供 MCP 的文档、示例代码、服务器目录和最佳实践。"
        },
        "twitter": {
          "title": "Claude MCP 社区",
          "description": "Claude MCP 是一个开放的协议标准，用于在AI模型和开发环境间建立统一的上下文交互，claudemcp.com 是 MCP 的社区网站，提供 MCP 的文档、示例代码、服务器目录和最佳实践。"
        }
      },
      "hero": {
        "introducing": "全新发布",
        "title": "Claude MCP 社区",
        "description": "Claude MCP（模型上下文协议）是 Claude 定制的一个开放的协议标准，用于在AI模型和开发环境之间建立统一的上下文交互，让AI更好地理解和处理代码。",
        "getStarted": "开始使用",
        "documentation": "查看文档",
        "videoCourse": "视频课程",
        "a2a": "A2A 协议"
      },
      "overview": {
        "title": "为什么选择 Claude MCP?",
        "description1": "Claude MCP 提供了一个标准化的方式来处理AI模型与开发环境之间的上下文交互",
        "description2": "通过统一的协议，我们可以让AI更好地理解代码结构、项目环境和开发者意图",
        "supports": {
          "systems": "多系统支持",
          "tools": "工具集成",
          "environments": "环境适配",
          "datasets": "数据集支持"
        },
        "components": {
          "title": "核心组件",
          "spec": "协议规范",
          "desktop": "桌面集成",
          "servers": "服务实现"
        },
        "architecture": {
          "title": "架构",
          "description": "Claude MCP 定义了一个灵活的客户端-服务器架构，支持多种传输机制和扩展能力。",
          "diagram": "flowchart TB\n    Client[客户端]-->|发送请求|Server[服务器]\n    Server-->|发送响应|Client\n    Server-->|发送通知|Client\n    subgraph 服务器能力\n        Prompts[提示词]\n        Resources[资源]\n        Tools[工具]\n    end",
          "server": {
            "title": "服务器功能",
            "description": "服务器通过 MCP 提供基础构建块，为语言模型添加上下文。这些原语支持客户端、服务器和语言模型之间的丰富交互：",
            "revision": "协议修订：2024-11-05",
            "primitives": {
              "description": "每个原语可以在以下控制层次结构中概括：",
              "headers": ["原语", "控制", "描述", "示例"],
              "items": [
                {
                  "primitive": "提示词",
                  "control": "用户控制",
                  "description": "用户选择调用的交互式模板",
                  "example": "斜杠命令、菜单选项"
                },
                {
                  "primitive": "资源",
                  "control": "应用控制",
                  "description": "由客户端附加和管理的上下文数据",
                  "example": "文件内容、Git 历史"
                },
                {
                  "primitive": "工具",
                  "control": "模型控制",
                  "description": "暴露给语言模型以执行操作的函数",
                  "example": "API POST 请求、文件写入"
                }
              ]
            },
            "features": [
              {
                "title": "提示词",
                "description": "提示词是预定义的模板或指令，用于引导语言模型交互。它们可以：",
                "items": [
                  "定义特定任务的标准化交互模式",
                  "包含动态参数以适应不同场景",
                  "通过用户界面元素（如命令或按钮）触发"
                ]
              },
              {
                "title": "资源",
                "description": "资源是为模型提供额外上下文的结构化数据或内容。它们可以：",
                "items": [
                  "包含文件内容、代码片段或其他结构化数据",
                  "由客户端应用程序自动管理和更新",
                  "在对话过程中动态添加或移除"
                ]
              },
              {
                "title": "工具",
                "description": "工具是允许模型执行操作或检索信息的可执行函数。它们可以：",
                "items": [
                  "执行文件操作或 API 调用",
                  "检索外部数据或信息",
                  "修改客户端状态或环境"
                ]
              }
            ]
          }
        }
      },
      "protocol": {
        "title": "协议设计",
        "description": "基于 JSON-RPC 2.0 的简单而强大的协议设计，支持双向通信和丰富的上下文交互",
        "example": "示例",
        "viewSpec": "查看完整规范",
        "components": {
          "resources": {
            "title": "资源管理",
            "description": "统一的资源访问接口，支持代码、文档等多种资源类型"
          },
          "tools": {
            "title": "工具集成",
            "description": "灵活的工具集成机制，支持文件系统、终端等多种工具"
          },
          "messages": {
            "title": "消息通信",
            "description": "标准化的消息格式，支持丰富的上下文信息传递"
          }
        },
        "features": {
          "title": "核心特性",
          "standardized": "标准化",
          "standardizedDescription": "基于 JSON-RPC 2.0 的标准化协议设计",
          "extensible": "可扩展",
          "extensibleDescription": "灵活的扩展机制支持自定义功能",
          "secure": "安全可靠",
          "secureDescription": "内置安全机制确保数据传输安全"
        }
      },
      "features": {
        "title": "核心特性",
        "description": "为AI模型提供丰富的上下文支持，让开发更高效",
        "docs": {
          "title": "完整文档",
          "description": "详尽的协议文档和示例代码"
        },
        "community": {
          "title": "社区支持",
          "description": "活跃的开发者社区和技术支持"
        },
        "ecosystem": {
          "title": "生态系统",
          "description": "丰富的工具和插件生态"
        }
      },
      "integration": {
        "title": "简单集成",
        "description": "提供简单易用的API和SDK，快速集成到您的项目中",
        "viewGithub": "查看源码",
        "features": {
          "simple": "简单易用",
          "flexible": "灵活可扩展",
          "secure": "安全可靠",
          "fast": "高性能"
        }
      },
      "global": {
        "title": "全球化支持",
        "description": "支持多语言和多地区，让全球开发者都能轻松使用",
        "languages": {
          "en": "English",
          "zh": "中文",
          "tw": "繁體中文",
          "ko": "한국어"
        },
        "features": {
          "community": "全球社区",
          "documentation": "多语言文档",
          "support": "本地化支持"
        }
      }
    },
    "footer": {
      "description": "Claude MCP 社区是一个专注于 Claude MCP 协议的社区网站，提供 Claude MCP 协议的详细介绍、示例代码、服务器目录和最佳实践。",
      "copyright": "保留所有权利。",
      "sections": {
        "product": "产品",
        "community": "社区",
        "contact": "联系",
        "hotMcp": "热门 MCP",
        "legal": "法律",
        "resources": "资源"
      },
      "links": {
        "docs": "文档",
        "about": "关于",
        "blog": "博客",
        "changelog": "更新日志",
        "github": "GitHub",
        "discord": "Discord",
        "twitter": "Twitter",
        "feedback": "反馈",
        "privacy": "隐私政策",
        "terms": "服务条款"
      }
    },
    "Specification": {
      "meta": {
        "title": "MCP 协议规范",
        "description": "Model Context Protocol 技术规范文档"
      },
      "breadcrumb": {
        "home": "首页",
        "specification": "规范"
      },
      "title": "协议规范",
      "description": "Model Context Protocol 的详细技术规范",
      "security": {
        "title": "安全与信任",
        "principles": {
          "title": "核心原则",
          "items": [
            "用户对数据访问的同意和控制",
            "敏感信息的保护",
            "安全的工具执行和授权",
            "清晰的安全影响文档"
          ]
        },
        "guidelines": {
          "title": "实施指南",
          "items": [
            "构建健全的同意流程",
            "实施访问控制",
            "遵循安全最佳实践"
          ]
        }
      },
      "backToHome": "返回首页",
      "version": "版本",
      "viewGithub": "在 GitHub 上查看",
      "overview": {
        "title": "协议概述",
        "description": "模型上下文协议 (MCP) 遵循客户端-主机-服务器架构，其中每个主机可以运行多个客户端实例。该架构使用户能够跨应用程序集成 AI 能力，同时保持清晰的安全边界并隔离问题。MCP 基于 JSON-RPC 构建，提供了一个有状态会话协议，专注于客户端和服务器之间的上下文交换和采样协调。",
        "architecture": {
          "title": "架构",
          "description": "核心组件架构如下所示：",
          "diagram": "graph LR\n    subgraph \"应用程序主机进程\"\n        H[主机]\n        C1[客户端 1]\n        C2[客户端 2]\n        C3[客户端 3]\n        H --> C1\n        H --> C2\n        H --> C3\n    end\n\n    subgraph \"本地机器\"\n        S1[服务器 1<br>文件 & Git]\n        S2[服务器 2<br>数据库]\n        R1[(\"本地<br>资源 A\")]\n        R2[(\"本地<br>资源 B\")]\n\n        C1 --> S1\n        C2 --> S2\n        S1 <--> R1\n        S2 <--> R2\n    end\n\n    subgraph \"互联网\"\n        S3[服务器 3<br>外部 API]\n        R3[(\"远程<br>资源 C\")]\n\n        C3 --> S3\n        S3 <--> R3\n    end",
          "componentTitle": "组件",
          "components": {
            "hosts": "发起连接的 LLM 应用程序",
            "clients": "主机应用程序中的连接器",
            "servers": "提供特定功能的服务"
          },
          "details": {
            "title": "组件详情",
            "host": {
              "title": "主机",
              "description": "主机进程是 MCP 协议的核心协调者。它负责管理客户端实例的生命周期，控制连接权限，并执行安全策略。主机还负责协调 AI/LLM 集成，确保整个系统的平稳运行。",
              "features": [
                "管理客户端实例的生命周期",
                "控制连接权限和执行安全策略",
                "协调 AI/LLM 集成",
                "确保系统稳定运行"
              ]
            },
            "client": {
              "title": "客户端",
              "description": "客户端由主机创建，用于维护与服务器的独立连接。每个客户端都与一个服务器保持 1:1 的关系，确保连接的隔离性和安全性。",
              "features": [
                "维护与服务器的独立连接",
                "建立有状态会话",
                "处理协议协商",
                "管理消息路由"
              ]
            },
            "server": {
              "title": "服务器",
              "description": "服务器负责公开资源和工具，可以独立运行并通过客户端请求采样。服务器可以是本地的也可以是远程的，为系统提供各种功能。",
              "features": [
                "公开特定的资源和工具",
                "独立运行和管理",
                "通过客户端处理请求",
                "支持本地和远程服务"
              ]
            }
          },
          "principles": {
            "title": "设计原则",
            "description": "MCP 建立在以下关键设计原则之上：",
            "items": [
              {
                "title": "简单易实现",
                "description": "服务器应该极其容易构建",
                "features": [
                  "主机应用程序处理复杂的编排职责",
                  "服务器专注于特定的、定义明确的功能",
                  "简单的接口最小化实现开销",
                  "清晰的分离确保代码可维护性"
                ]
              },
              {
                "title": "高度可组合",
                "description": "服务器应该具有高度的可组合性",
                "features": [
                  "每个服务器独立提供专注的功能",
                  "多个服务器可以无缝组合",
                  "共享协议实现互操作性",
                  "模块化设计支持可扩展性"
                ]
              },
              {
                "title": "安全隔离",
                "description": "服务器不应能读取整个对话，也不应能\"看到\"其他服务器",
                "features": [
                  "服务器仅接收必要的上下文信息",
                  "完整对话历史保留在主机",
                  "每个服务器连接保持隔离",
                  "跨服务器交互由主机控制",
                  "主机进程执行安全边界"
                ]
              },
              {
                "title": "渐进式增强",
                "description": "服务器和客户端的功能可以渐进式添加",
                "features": [
                  "核心协议提供最小必需功能",
                  "可根据需要协商额外功能",
                  "服务器和客户端独立演进",
                  "协议设计支持未来扩展",
                  "保持向后兼容性"
                ]
              }
            ]
          },
          "messages": {
            "title": "协议基础",
            "description": "MCP 中的所有消息必须遵循 JSON-RPC 2.0 规范。协议定义了三种类型的消息：",
            "items": [
              {
                "title": "请求",
                "description": "双向消息，可以从客户端发送到服务器，也可以反向发送",
                "features": [
                  "必须包含字符串或整数类型的 ID",
                  "ID 不能为 null",
                  "在同一会话中，请求方不能重复使用相同的 ID",
                  "可以包含可选的参数对象"
                ],
                "codeExample": {
                  "title": "请求示例",
                  "code": {
                    "jsonrpc": "2.0",
                    "id": "string | number",
                    "method": "string",
                    "param?": {  
                      "key": "value"
                    }
                  }
                }
              },
              {
                "title": "响应",
                "description": "作为对请求的回复而发送",
                "features": [
                  "必须包含与对应请求相同的 ID",
                  "必须设置 result 或 error 其中之一，不能同时设置",
                  "错误码必须是整数",
                  "可以包含可选的结果数据"
                ],
                "codeExample": {
                  "title": "响应示例",
                  "code": {
                    "jsonrpc": "2.0",
                    "id": "string | number",
                    "result?": {
                      "[key: string]": "unknown"
                    },
                    "error?": {
                      "code": "number",
                      "message": "string",
                      "data?": "unknown"
                    }
                  }
                }
              },
              {
                "title": "通知",
                "description": "不需要响应的单向消息，可以从客户端发送到服务器，也可以反向发送",
                "features": [
                  "不能包含 ID 字段",
                  "用于状态更新和事件通知",
                  "可以包含可选的参数对象",
                  "减少通信开销，支持异步操作"
                ],
                "codeExample": {
                  "title": "通知示例",
                  "code": {
                    "jsonrpc": "2.0",
                    "method": "string",
                    "params?": {
                      "[key: string]": "unknown"
                    }
                  }
                }
              }
            ]
          },
          "lifecycle": {
            "title": "生命周期",
            "description": "MCP 为客户端-服务器连接定义了严格的生命周期，确保正确的能力协商和状态管理。",
            "diagram": "sequenceDiagram\n    participant 客户端\n    participant 服务器\n\n    Note over 客户端,服务器: 初始化阶段\n    activate 客户端\n    客户端->>+服务器: 初始化请求\n    服务器-->>客户端: 初始化响应\n    客户端--)服务器: 初始化完成通知\n\n    Note over 客户端,服务器: 操作阶段\n    rect rgb(200, 220, 250)\n        note over 客户端,服务器: 正常协议操作\n    end\n\n    Note over 客户端,服务器: 关闭\n    客户端--)-服务器: 断开连接\n    deactivate 服务器\n    Note over 客户端,服务器: 连接已关闭",
            "phases": [
              {
                "title": "初始化阶段",
                "description": "初始化阶段必须是客户端和服务器之间的第一次交互。在此阶段，双方：",
                "features": [
                  "建立协议版本兼容性",
                  "交换和协商能力",
                  "共享实现细节"
                ],
                "codeExamples": [
                  {
                    "title": "初始化请求",
                    "code": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "method": "initialize",
                      "params": {
                        "protocolVersion": "2024-11-05",
                        "capabilities": {
                          "roots": {
                            "listChanged": true
                          },
                          "sampling": {}
                        },
                        "clientInfo": {
                          "name": "ExampleClient",
                          "version": "1.0.0"
                        }
                      }
                    }
                  },
                  {
                    "title": "初始化响应",
                    "code": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": {
                        "protocolVersion": "2024-11-05",
                        "capabilities": {
                          "logging": {},
                          "prompts": {
                            "listChanged": true
                          },
                          "resources": {
                            "subscribe": true,
                            "listChanged": true
                          },
                          "tools": {
                            "listChanged": true
                          }
                        },
                        "serverInfo": {
                          "name": "ExampleServer",
                          "version": "1.0.0"
                        }
                      }
                    }
                  },
                  {
                    "title": "初始化完成通知",
                    "code": {
                      "jsonrpc": "2.0",
                      "method": "initialized"
                    }
                  }
                ]
              },
              {
                "title": "版本协商",
                "description": "在初始化请求中，客户端必须发送其支持的协议版本。",
                "features": [
                  "客户端应发送其支持的最新版本",
                  "服务器必须响应相同版本或其支持的其他版本",
                  "如果客户端不支持服务器的版本，应断开连接"
                ]
              },
              {
                "title": "能力协商",
                "description": "客户端和服务器能力确定会话期间可用的可选协议功能。",
                "capabilities": {
                  "client": [
                    {
                      "name": "roots",
                      "description": "提供文件系统根目录的能力"
                    },
                    {
                      "name": "sampling",
                      "description": "支持 LLM 采样请求"
                    },
                    {
                      "name": "experimental",
                      "description": "描述对非标准实验性功能的支持"
                    }
                  ],
                  "server": [
                    {
                      "name": "prompts",
                      "description": "提供提示模板"
                    },
                    {
                      "name": "resources",
                      "description": "提供可读资源"
                    },
                    {
                      "name": "tools",
                      "description": "提供可调用工具"
                    },
                    {
                      "name": "logging",
                      "description": "发出结构化日志消息"
                    },
                    {
                      "name": "experimental",
                      "description": "描述对非标准实验性功能的支持"
                    }
                  ]
                }
              },
              {
                "title": "操作阶段",
                "description": "在操作阶段，客户端和服务器根据协商的能力交换消息。",
                "features": [
                  "遵守协商的协议版本",
                  "仅使用成功协商的能力"
                ]
              },
              {
                "title": "关闭阶段",
                "description": "在关闭阶段，连接被优雅地终止。",
                "features": [
                  "客户端发送断开连接通知",
                  "服务器关闭连接",
                  "清理相关资源"
                ]
              }
            ]
          },
          "transports": {
            "title": "传输机制",
            "description": "MCP 目前定义了两种标准的客户端-服务器通信传输机制：stdio（标准输入输出）和基于 SSE 的 HTTP。客户端应尽可能支持 stdio。此外，客户端和服务器也可以以可插拔的方式实现自定义传输机制。",
            "revision": "协议修订：2024-11-05",
            "stdio": {
              "title": "标准输入输出（stdio）",
              "description": "在 stdio 传输机制中：",
              "features": [
                "客户端将 MCP 服务器作为子进程启动",
                "服务器通过标准输入（stdin）接收 JSON-RPC 消息，并通过标准输出（stdout）写入响应",
                "消息以换行符分隔，且不能包含嵌入的换行符",
                "服务器可以将 UTF-8 字符串写入标准错误（stderr）用于日志记录。客户端可以捕获、转发或忽略这些日志",
                "服务器不能向标准输出写入任何非有效 MCP 消息的内容",
                "客户端不能向服务器的标准输入写入任何非有效 MCP 消息的内容"
              ],
              "diagram": "sequenceDiagram\n    participant 客户端\n    participant 服务进程\n\n    客户端->>+服务进程: 启动子进程\n    loop 消息交换\n        客户端->>服务进程: 写入标准输入\n        服务进程-->>客户端: 写入标准输出\n        服务进程-->>客户端: 可选：标准错误日志\n    end\n    客户端->>服务进程: 关闭标准输入，终止子进程\n    deactivate 服务进程"
            },
            "sse": {
              "title": "基于 SSE 的 HTTP",
              "description": "在 SSE 传输机制中，服务器作为独立进程运行，可以处理多个客户端连接。",
              "endpoints": {
                "title": "服务器必须提供两个端点：",
                "items": [
                  {
                    "title": "SSE 端点",
                    "description": "用于客户端建立连接并接收来自服务器的消息"
                  },
                  {
                    "title": "HTTP POST 端点",
                    "description": "用于客户端向服务器发送消息"
                  }
                ]
              },
              "requirements": [
                "当客户端连接时，服务器必须发送一个包含客户端用于发送消息的 URI 的 endpoint 事件",
                "所有后续的客户端消息必须作为 HTTP POST 请求发送到此端点",
                "服务器消息作为 SSE message 事件发送，消息内容以 JSON 格式编码在事件数据中"
              ],
              "diagram": "sequenceDiagram\n    participant 客户端\n    participant 服务器\n\n    客户端->>+服务器: 打开 SSE 连接\n    服务器-->>客户端: endpoint 事件\n    loop 消息交换\n        客户端->>服务器: HTTP POST 消息\n        服务器-->>客户端: SSE message 事件\n    end\n    客户端->>服务器: 关闭 SSE 连接\n    deactivate 服务器"
            },
            "custom": {
              "title": "自定义传输机制",
              "description": "客户端和服务器可以实现额外的自定义传输机制以满足其特定需求。协议与传输机制无关，可以在任何支持双向消息交换的通信通道上实现。",
              "requirements": [
                "选择支持自定义传输机制的实现者必须确保保留 MCP 定义的 JSON-RPC 消息格式和生命周期要求",
                "自定义传输机制应该记录其特定的连接建立和消息交换模式，以帮助实现互操作性"
              ]
            }
          },
          "capabilities": {
            "title": "核心功能",
            "clientTitle": "客户端能力",
            "serverTitle": "服务器能力",
            "items": [
              "与语言模型共享上下文信息",
              "向 AI 系统暴露工具和功能",
              "构建可组合的集成和工作流程",
              "实现对资源的安全和受控访问"
            ]
          },
          "communication": {
            "title": "通信机制",
            "description": "使用 JSON-RPC 2.0 进行标准化消息交换",
            "features": [
              "有状态连接",
              "能力协商",
              "安全数据传输",
              "错误处理"
            ]
          }
        },
        "baseProtocol": {
          "title": "基础协议",
          "subtitle": "基于 JSON-RPC 2.0",
          "description": "MCP 基于 JSON-RPC 2.0 协议，提供了一套标准化的请求-响应模式",
          "methods": {
            "initialize": {
              "title": "Initialize",
              "description": "初始化连接并协商能力"
            },
            "ready": {
              "title": "Ready",
              "description": "服务端准备就绪通知"
            },
            "shutdown": {
              "title": "Shutdown",
              "description": "关闭连接"
            }
          }
        },
        "serverFeatures": {
          "title": "服务端功能",
          "description": "服务器提供了通过 MCP 将上下文添加到语言模型的基本构建块，提供了三个基本原语来管理上下文：提示词、资源和工具。",
          "primitives": {
            "headers": ["原语", "控制", "描述", "示例"],
            "items": [
              {
                "primitive": "提示词",
                "control": "系统",
                "description": "定义模型的行为和角色",
                "example": "你是一个专业的代码审查者"
              },
              {
                "primitive": "资源",
                "control": "用户",
                "description": "提供额外的上下文信息",
                "example": "代码文件、文档"
              },
              {
                "primitive": "工具",
                "control": "系统/用户",
                "description": "扩展模型的能力",
                "example": "代码搜索、文件编辑"
              }
            ]
          },
          "features": [
            {
              "title": "资源管理",
              "description": "为AI模型提供上下文和数据",
              "items": [
                "支持多种资源类型",
                "动态资源加载",
                "资源生命周期管理"
              ]
            },
            {
              "title": "工具集成",
              "description": "扩展AI模型的能力范围",
              "items": [
                "灵活的工具注册机制",
                "工具调用权限控制",
                "异步工具执行支持"
              ]
            },
            {
              "title": "上下文控制",
              "description": "精确控制AI模型的行为",
              "items": [
                "系统级提示词管理",
                "动态上下文更新",
                "多轮对话状态维护"
              ]
            }
          ]
        }
      }
    },
    "Common": {
      "loading": "加载中...",
      "error": "出错了",
      "retry": "重试",
      "close": "关闭",
      "save": "保存",
      "cancel": "取消",
      "delete": "删除",
      "edit": "编辑",
      "view": "查看",
      "more": "更多",
      "back": "返回",
      "next": "下一步",
      "previous": "上一步",
      "finish": "完成",
      "continue": "继续",
      "submit": "提交",
      "confirm": "确认",
      "success": "成功",
      "failed": "失败",
      "copied": "已复制",
      "learnMore": "了解更多"
    },
    "Servers": {
      "title": "Claude MCP 服务器目录",
      "description": "发现最好最热门的 Claude MCP 服务器",
      "viewAll": "查看全部",
      "noServers": "未找到服务器",
      "author": "作者",
      "links": "链接",
      "homepage": "主页",
      "repository": "代码仓库",
      "tags": "标签",
      "capabilities": "功能",
      "filterByTags": "按标签筛选",
      "allTags": "全部",
      "search": "搜索服务器",
      "searchPlaceholder": "输入关键词搜索...",
      "serverDetails": "服务器详情",
      "notFound": "服务器未找到",
      "notFoundDescription": "请求的服务器无法找到。",
      "submitServer": "提交服务器",
      "relatedServers": "相关推荐服务器"
    },
    "Docs": {
      "meta": {
          "title": "Claude MCP 文档",
          "description": "Claude MCP 协议的官方文档平台，提供开发者资源和社区协作。",
          "og": {
            "title": "Claude MCP 文档", 
            "description": "Claude MCP协议的官方文档平台，提供开发者资源和社区协作。"
          },
          "twitter": {
            "title": "Claude MCP 文档",
            "description": "Claude MCP协议的官方文档平台，提供开发者资源和社区协作。"
          }
        },
      "landingPage": {
        "title": "Model Context Protocol (MCP) 文档中心",
        "welcome": "欢迎访问 Model Context Protocol (MCP) 文档中心。请从左侧导航选择具体文档主题，或继续阅读下方的概述。",
        "whatIs": {
          "title": "什么是 Model Context Protocol？",
          "description": "Model Context Protocol (MCP) 是由 Anthropic Claude 推出的开源协议，旨在建立AI模型与开发环境之间的统一上下文交互标准。通过提供标准化的上下文信息访问方式，MCP 使AI模型能够更好地理解和处理代码，充当它们之间的桥梁，让开发者能够通过单一标准连接AI应用和各种数据源。"
        },
        "features": {
          "title": "主要功能与特性",
          "unifiedInterface": {
            "title": "统一接口",
            "description": "提供标准化的API接口，简化AI与各类上下文信息的交互"
          },
          "seamlessIntegration": {
            "title": "无缝集成",
            "description": "轻松集成到现有开发工作流程中，无需复杂的适配"
          },
          "multiSource": {
            "title": "多源数据支持",
            "description": "支持从多种来源获取上下文信息，包括代码仓库、文档等"
          },
          "contextManagement": {
            "title": "智能上下文管理",
            "description": "优化上下文信息的传递，提高AI模型理解和生成的质量"
          },
          "extensibility": {
            "title": "扩展性设计",
            "description": "灵活的架构允许添加新的数据源和功能"
          }
        },
        "useCases": {
          "title": "使用场景",
          "codeDevelopment": {
            "title": "代码管理与开发",
            "description": "通过Claude桌面应用程序和MCP协议，AI可以帮助用户管理GitHub项目，轻松完成从创建项目到提交代码请求的复杂任务。"
          },
          "documentProcessing": {
            "title": "智能文档处理",
            "description": "MCP使AI能够理解和处理各种文档格式，提供更精准的内容分析和生成建议。"
          },
          "knowledgeIntegration": {
            "title": "知识库集成",
            "description": "将企业内部知识库与AI模型无缝连接，提供基于企业特定知识的智能回答和建议。"
          },
          "devTools": {
            "title": "开发工具增强",
            "description": "为IDE和开发工具提供智能辅助功能，根据代码上下文提供更准确的建议和自动完成。"
          }
        },
        "whyChoose": {
          "title": "为什么选择MCP？",
          "description": "MCP协议的出现有望彻底解决LLM（大型语言模型）应用难以连接数据的痛点，使前沿模型能够生成更好、更相关的响应，而无需为每个数据源编写自定义集成代码 - 单一的MCP协议可以处理与多个数据源的连接。"
        },
        "getStarted": {
          "title": "开始使用",
          "description": "要开始使用MCP，请从左侧导航的\"入门指南\"部分查看<introduction>简介</introduction>。对于想要快速上手的用户，我们提供了<quickstart>快速入门指南</quickstart>。"
        },
        "cta": {
          "title": "准备好开始探索MCP了吗？",
          "subtitle": "查看我们的详细文档，了解如何将MCP集成到您的项目中。",
          "exploreButton": "开始探索",
          "githubButton": "GitHub 仓库"
        }
      },
      "nav": {
        "getting_started": "入门指南",
        "base-dev": "基础开发",
        "python": "Python",
        "guides": "使用指南",
        "advanced": "高级主题",
        "previous": "上一页",
        "next": "下一页",
        "items": {
          "introduction": "简介",
          "architecture": "架构",
          "installation": "安装",
          "protocol": "协议",
          "transports-2025-03-26": "传输协议",
          "streamable-http": "Streamable HTTP",
          "quickstart": "快速开始",
          "getting_started": "入门指南",
          "write-ts-server": "MCP 服务器",
          "write-ts-client": "MCP 客户端",
          "use-llm-dev-mcp": "使用 Cursor/LLM 开发 MCP",
          "sampling-usage": "MCP 中的 Sampling 功能",
          "dev-sse-mcp": "开发 SSE 类型的 MCP 服务",
          "mcp-py-sdk-basic": "使用 MCP Python SDK 开发 MCP 服务器与客户端",
          "mcp-py-sdk-deep": "使用 MCP Python SDK 实现 SSE 和 Streamable HTTP 协议",
          "mcp-authorization": "MCP Authorization 授权机制",
          "resources": "资源管理",
          "tools": "工具使用",
          "messages": "消息处理",
          "security": "安全",
          "deployment": "部署",
          "configuration": "配置"
        }
      }
    },
    "Clients": {
      "title": "Claude MCP 客户端",
      "description": "探索实现模型上下文协议（Claude MCP）的各种客户端应用",
      "details": "客户端详情",
      "noClients": "未找到客户端",
      "viewAll": "查看所有客户端",
      "backToClients": "返回客户端列表",
      "author": "开发者",
      "published": "发布日期",
      "platforms": "支持平台",
      "visitHomepage": "访问主页",
      "viewRepository": "查看代码仓库",
      "platformWindows": "Windows",
      "platformMac": "macOS",
      "platformLinux": "Linux",
      "platformWeb": "网页版",
      "platformIos": "iOS",
      "platformAndroid": "Android",
      "notFound": "未找到客户端",
      "notFoundDescription": "请求的客户端未找到",
      "search": "搜索客户端",
      "searchPlaceholder": "输入关键词搜索..."
    },
    "Tools": {
      "title": "Claude MCP 工具",
      "description": "探索和测试我们的 MCP 开发和调试工具",
      "playground": {
        "title": "MCP 实验场",
        "description": "在线对话试用各类 MCP Server"
      },
      "inspector": {
        "title": "MCP Inspector",
        "description": "使用 MCP 官方调试器在线测试的 MCP Server"
      },
      "openPlayground": "打开实验场",
      "openInspector": "打开调试器"
    },
    "Resources": {
      "meta": {
        "title": "资源 - Claude MCP",
        "description": "探索来自 Claude MCP 社区的相关产品和实用工具"
      },
      "title": "社区资源",
      "description": "发现由 Claude MCP 社区成员创建的实用产品和工具",
      "products": {
        "gptsora": "使用 OpenAI 的 Sora 2 模型，通过简单文本描述创建令人惊叹的、逼真的视频",
        "genspark": "全能超级代理 AI 工作空间，无所不能",
        "asmr": "创建令人放松的 AI 生成 ASMR 视频",
        "dripo": "AI 驱动的内容创作平台",
        "tomarkdown": "将任何文档转换为 Markdown 格式",
        "rooms": "AI 驱动的虚拟房间设计工具",
        "humanize": "让 AI 生成的文本更自然、更人性化",
        "manus": "用于写作和内容创作的 AI 助手",
        "extensions": "通过强大的扩展增强桌面体验",
        "calculator": "支持各种计算的综合在线计算器",
        "compress": "快速高效的文件压缩工具",
        "a2a": "代理到代理通信协议",
        "deepsite": "AI 驱动的网站构建器",
        "invincible": "生成自定义 Invincible 风格标题卡",
        "colorblock": "Color Block Jam 拼图游戏关卡生成器"
      },
      "disclaimer": "这些资源由社区成员提供。访问每个网站了解更多关于他们的产品。"
    }
  }