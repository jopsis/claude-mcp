{
    "nav": {
      "title": "Claude MCP",
      "servers": "서버 목록",
      "clients": "클라이언트 목록",
      "playground": "실험실",
      "inspector": "인스펙터",
      "documentation": "문서",
      "blog": "블로그",
      "specification": "프로토콜 사양",
      "community": "커뮤니티",
      "getting_started": "시작하기",
      "guides": "사용 가이드",
      "advanced": "고급 주제",
      "open_menu": "메뉴 열기",
      "close_menu": "메뉴 닫기",
      "items": {
        "introduction": "소개",
        "installation": "설치",
        "quick_start": "빠른 시작",
        "resources": "리소스 관리",
        "tools": "도구 통합",
        "messages": "메시지 형식",
        "security": "보안",
        "deployment": "배포",
        "configuration": "구성"
      }
    },
    "home": {
      "title": "글로벌 기술 커뮤니티",
      "description": "Anthropic MCP 프로토콜 문서, 개발자 리소스 및 커뮤니티 협업을 위한 최고의 플랫폼.",
      "getStarted": "시작하기",
      "joinCommunity": "커뮤니티 가입",
      "latestDocs": {
        "title": "최신 Claude MCP 학습 문서",
        "description": "최신 Claude MCP 문서와 학습 튜토리얼을 확인하세요",
        "noDate": "날짜 없음",
        "viewAll": "모든 문서 보기"
      }
    },
    "HomePage": {
      "latestBlog": {
        "title": "최신 블로그 게시물",
        "description": "Claude MCP, AI 기술 및 개발 사례에 대한 최신 인사이트와 튜토리얼을 읽어보세요",
        "viewAll": "모든 게시물 보기"
      }
    },
    "Index": {
      "meta": {
        "title": "Claude MCP 커뮤니티",
        "description": "Claude MCP는 AI 모델과 개발 환경 간의 통합된 컨텍스트 상호작용을 위한 개방형 프로토콜 표준입니다, claudemcp.com 은 Claude MCP 의 커뮤니티 웹사이트로, Claude MCP 의 문서, 예제 코드, 서버 목록 및 최선의 사례를 제공합니다.",
        "keywords": "AI, 프로토콜, 컨텍스트, 개발 환경, Claude",
        "og": {
          "title": "Claude MCP 커뮤니티",
          "description": "Claude MCP는 AI 모델과 개발 환경 간의 통합된 컨텍스트 상호작용을 위한 개방형 프로토콜 표준입니다, claudemcp.com 은 Claude MCP 의 커뮤니티 웹사이트로, Claude MCP 의 문서, 예제 코드, 서버 목록 및 최선의 사례를 제공합니다."
        },
        "twitter": {
          "title": "Claude MCP 커뮤니티",
          "description": "Claude MCP는 AI 모델과 개발 환경 간의 통합된 컨텍스트 상호작용을 위한 개방형 프로토콜 표준, claudemcp.com 은 Claude MCP 의 커뮤니티 웹사이트로, Claude MCP 의 문서, 예제 코드, 서버 목록 및 최선의 사례를 제공합니다."
        }
      },
      "hero": {
        "introducing": "새로운 출시",
        "title": "Claude MCP 커뮤니티",
        "description": "Claude MCP(모델 컨텍스트 프로토콜)는 Claude가 맞춤 제작한 개방형 프로토콜 표준으로, AI 모델과 개발 환경 간의 통합된 컨텍스트 상호작용을 제공하여 AI가 코드를 더 잘 이해하고 처리할 수 있게 합니다.",
        "getStarted": "시작하기",
        "documentation": "문서 보기",
        "videoCourse": "비디오 강좌",
        "a2a": "A2A 프로토콜"
      },
      "overview": {
        "title": "왜 Claude MCP인가?",
        "description1": "Claude MCP는 AI 모델과 개발 환경 간의 컨텍스트 상호작용을 처리하는 표준화된 방법을 제공합니다",
        "description2": "통합 프로토콜을 통해 AI가 코드 구조, 프로젝트 환경 및 개발자 의도를 더 잘 이해할 수 있습니다",
        "supports": {
          "systems": "다중 시스템 지원",
          "tools": "도구 통합",
          "environments": "환경 적응",
          "datasets": "데이터셋 지원"
        },
        "components": {
          "title": "핵심 구성 요소",
          "spec": "프로토콜 사양",
          "desktop": "데스크톱 통합",
          "servers": "서버 구현"
        },
        "architecture": {
          "title": "아키텍처",
          "description": "Claude MCP는 다양한 전송 메커니즘과 확장 기능을 지원하는 유연한 클라이언트-서버 아키텍처를 정의합니다.",
          "diagram": "flowchart TB\n    Client[클라이언트]-->|요청 전송|Server[서버]\n    Server-->|응답 전송|Client\n    Server-->|알림 전송|Client\n    subgraph 서버 기능\n        Prompts[프롬프트]\n        Resources[리소스]\n        Tools[도구]\n    end",
          "server": {
            "title": "서버 기능",
            "description": "서버는 MCP를 통해 언어 모델에 컨텍스트를 추가하기 위한 기본 구성 요소를 제공합니다. 이러한 기본 요소는 클라이언트, 서버 및 언어 모델 간의 풍부한 상호작용을 지원합니다:",
            "revision": "프로토콜 개정: 2024-11-05",
            "primitives": {
              "description": "각 기본 요소는 다음과 같은 제어 계층 구조로 요약할 수 있습니다:",
              "headers": ["기본 요소", "제어", "설명", "예시"],
              "items": [
                {
                  "primitive": "프롬프트",
                  "control": "사용자 제어",
                  "description": "사용자가 호출할 대화형 템플릿 선택",
                  "example": "슬래시 명령, 메뉴 옵션"
                },
                {
                  "primitive": "리소스",
                  "control": "애플리케이션 제어",
                  "description": "클라이언트가 첨부하고 관리하는 컨텍스트 데이터",
                  "example": "파일 내용, Git 기록"
                },
                {
                  "primitive": "도구",
                  "control": "모델 제어",
                  "description": "언어 모델이 작업을 수행할 수 있도록 노출된 함수",
                  "example": "API POST 요청, 파일 쓰기"
                }
              ]
            },
            "features": [
              {
                "title": "프롬프트",
                "description": "프롬프트는 언어 모델 상호작용을 안내하는 사전 정의된 템플릿이나 지시사항입니다. 이들은:",
                "items": [
                  "특정 작업에 대한 표준화된 상호작용 패턴 정의",
                  "다양한 시나리오에 맞게 조정할 수 있는 동적 매개변수 포함",
                  "명령이나 버튼과 같은 사용자 인터페이스 요소를 통해 트리거"
                ]
              },
              {
                "title": "리소스",
                "description": "리소스는 모델에 추가 컨텍스트를 제공하는 구조화된 데이터나 콘텐츠입니다. 이들은:",
                "items": [
                  "파일 내용, 코드 조각 또는 기타 구조화된 데이터 포함",
                  "클라이언트 애플리케이션에 의해 자동으로 관리 및 업데이트",
                  "대화 중에 동적으로 추가 또는 제거 가능"
                ]
              },
              {
                "title": "도구",
                "description": "도구는 모델이 작업을 수행하거나 정보를 검색할 수 있게 하는 실행 가능한 함수입니다. 이들은:",
                "items": [
                  "파일 작업 또는 API 호출 수행",
                  "외부 데이터나 정보 검색",
                  "클라이언트 상태나 환경 수정"
                ]
              }
            ]
          }
        }
      },
      "protocol": {
        "title": "프로토콜 설계",
        "description": "JSON-RPC 2.0 기반의 간단하면서도 강력한 프로토콜 설계로 양방향 통신과 풍부한 컨텍스트 상호작용을 지원합니다",
        "example": "예시",
        "viewSpec": "전체 사양 보기",
        "components": {
          "resources": {
            "title": "리소스 관리",
            "description": "통합된 리소스 접근 인터페이스로 코드, 문서 등 다양한 리소스 유형 지원"
          },
          "tools": {
            "title": "도구 통합",
            "description": "유연한 도구 통합 메커니즘으로 파일 시스템, 터미널 등 다양한 도구 지원"
          },
          "messages": {
            "title": "메시지 통신",
            "description": "표준화된 메시지 형식으로 풍부한 컨텍스트 정보 전달 지원"
          }
        },
        "features": {
          "title": "핵심 특징",
          "standardized": "표준화",
          "standardizedDescription": "JSON-RPC 2.0 기반의 표준화된 프로토콜 설계",
          "extensible": "확장 가능",
          "extensibleDescription": "유연한 확장 메커니즘으로 사용자 정의 기능 지원",
          "secure": "안전 신뢰성",
          "secureDescription": "내장된 보안 메커니즘으로 데이터 전송 안전 보장"
        }
      },
      "features": {
        "title": "핵심 특징",
        "description": "AI 모델에 풍부한 컨텍스트 지원을 제공하여 개발을 더 효율적으로 만듭니다",
        "docs": {
          "title": "완전한 문서",
          "description": "상세한 프로토콜 문서와 예제 코드"
        },
        "community": {
          "title": "커뮤니티 지원",
          "description": "활발한 개발자 커뮤니티와 기술 지원"
        },
        "ecosystem": {
          "title": "생태계",
          "description": "풍부한 도구와 플러그인 생태계"
        }
      },
      "integration": {
        "title": "간편한 통합",
        "description": "간단하고 사용하기 쉬운 API와 SDK를 제공하여 프로젝트에 빠르게 통합할 수 있습니다",
        "viewGithub": "소스 코드 보기",
        "features": {
          "simple": "사용 용이성",
          "flexible": "유연한 확장성",
          "secure": "안전 신뢰성",
          "fast": "고성능"
        }
      },
      "global": {
        "title": "글로벌 지원",
        "description": "다국어 및 다지역 지원으로 전 세계 개발자들이 쉽게 사용할 수 있습니다",
        "languages": {
          "en": "English",
          "zh": "中文",
          "tw": "繁體中文",
          "ko": "한국어"
        },
        "features": {
          "community": "글로벌 커뮤니티",
          "documentation": "다국어 문서",
          "support": "현지화 지원"
        }
      }
    },
    "footer": {
      "description": "Claude MCP 커뮤니티는 Claude MCP 프로토콜에 중점을 둔 커뮤니티 웹사이트로, Claude MCP 프로토콜의 상세한 소개, 예제 코드, 서버 목록 및 모범 사례를 제공합니다.",
      "copyright": "모든 권리 보유.",
      "sections": {
        "product": "제품",
        "community": "커뮤니티",
        "contact": "연락처",
        "hotMcp": "인기 MCP",
        "legal": "법률",
        "resources": "리소스"
      },
      "links": {
        "docs": "문서",
        "about": "소개",
        "blog": "블로그",
        "changelog": "변경 로그",
        "github": "GitHub",
        "discord": "Discord",
        "twitter": "Twitter",
        "feedback": "피드백",
        "privacy": "개인정보 보호정책",
        "terms": "서비스 약관"
      }
    },
    "Specification": {
      "meta": {
        "title": "MCP 프로토콜 사양",
        "description": "모델 컨텍스트 프로토콜 기술 사양 문서"
      },
      "title": "프로토콜 사양",
      "description": "모델 컨텍스트 프로토콜의 상세 기술 사양",
      "security": {
        "title": "보안 및 신뢰",
        "principles": {
          "title": "핵심 원칙",
          "items": [
            "데이터 접근에 대한 사용자 동의 및 제어",
            "민감한 정보 보호",
            "안전한 도구 실행 및 권한 부여",
            "명확한 보안 영향 문서화"
          ]
        },
        "guidelines": {
          "title": "구현 지침",
          "items": [
            "건전한 동의 프로세스 구축",
            "접근 제어 구현",
            "보안 모범 사례 준수"
          ]
        }
      },
      "backToHome": "홈으로 돌아가기",
      "version": "버전",
      "viewGithub": "GitHub에서 보기",
      "overview": {
        "title": "프로토콜 개요",
        "description": "모델 컨텍스트 프로토콜(MCP)은 각 호스트가 여러 클라이언트 인스턴스를 실행할 수 있는 클라이언트-호스트-서버 아키텍처를 따릅니다. 이 아키텍처는 사용자가 명확한 보안 경계를 유지하고 문제를 격리하면서 애플리케이션 전반에 걸쳐 AI 기능을 통합할 수 있게 합니다. MCP는 JSON-RPC를 기반으로 구축되어 클라이언트와 서버 간의 컨텍스트 교환 및 샘플링 조정에 중점을 둔 상태 유지 세션 프로토콜을 제공합니다.",
        "architecture": {
          "title": "아키텍처",
          "description": "핵심 구성 요소 아키텍처는 다음과 같습니다:",
          "diagram": "graph LR\n    subgraph \"애플리케이션 호스트 프로세스\"\n        H[호스트]\n        C1[클라이언트 1]\n        C2[클라이언트 2]\n        C3[클라이언트 3]\n        H --> C1\n        H --> C2\n        H --> C3\n    end\n\n    subgraph \"로컬 머신\"\n        S1[서버 1<br>파일 & Git]\n        S2[서버 2<br>데이터베이스]\n        R1[(\"로컬<br>리소스 A\")]\n        R2[(\"로컬<br>리소스 B\")]\n\n        C1 --> S1\n        C2 --> S2\n        S1 <--> R1\n        S2 <--> R2\n    end\n\n    subgraph \"인터넷\"\n        S3[서버 3<br>외부 API]\n        R3[(\"원격<br>리소스 C\")]\n\n        C3 --> S3\n        S3 <--> R3\n    end",
          "componentTitle": "구성 요소",
          "components": {
            "hosts": "연결을 시작하는 LLM 애플리케이션",
            "clients": "호스트 애플리케이션의 커넥터",
            "servers": "특정 기능을 제공하는 서비스"
          },
          "details": {
            "title": "구성 요소 세부 정보",
            "host": {
              "title": "호스트",
              "description": "호스트 프로세스는 MCP 프로토콜의 핵심 조정자입니다. 클라이언트 인스턴스의 수명 주기를 관리하고, 연결 권한을 제어하며, 보안 정책을 실행합니다. 호스트는 또한 AI/LLM 통합을 조정하여 전체 시스템의 원활한 운영을 보장합니다.",
              "features": [
                "클라이언트 인스턴스의 수명 주기 관리",
                "연결 권한 제어 및 보안 정책 실행",
                "AI/LLM 통합 조정",
                "시스템 안정성 보장"
              ]
            },
            "client": {
              "title": "클라이언트",
              "description": "클라이언트는 호스트에 의해 생성되어 서버와의 독립적인 연결을 유지합니다. 각 클라이언트는 서버와 1:1 관계를 유지하여 연결의 격리성과 보안을 보장합니다.",
              "features": [
                "서버와의 독립적인 연결 유지",
                "상태 유지 세션 설정",
                "프로토콜 협상 처리",
                "메시지 라우팅 관리"
              ]
            },
            "server": {
              "title": "서버",
              "description": "서버는 리소스와 도구를 노출하고, 독립적으로 실행되며, 클라이언트 요청을 통해 샘플링할 수 있습니다. 서버는 로컬 또는 원격일 수 있으며, 시스템에 다양한 기능을 제공합니다.",
              "features": [
                "특정 리소스 및 도구 노출",
                "독립적인 실행 및 관리",
                "클라이언트를 통한 요청 처리",
                "로컬 및 원격 서비스 지원"
              ]
            }
          },
          "principles": {
            "title": "설계 원칙",
            "description": "MCP는 다음과 같은 핵심 설계 원칙을 기반으로 합니다:",
            "items": [
              {
                "title": "구현 용이성",
                "description": "서버는 매우 쉽게 구축할 수 있어야 합니다",
                "features": [
                  "호스트 애플리케이션이 복잡한 조정 책임을 처리",
                  "서버는 특정하고 명확하게 정의된 기능에 집중",
                  "간단한 인터페이스로 구현 오버헤드 최소화",
                  "명확한 분리로 코드 유지 관리성 보장"
                ]
              },
              {
                "title": "높은 조합성",
                "description": "서버는 높은 조합성을 가져야 합니다",
                "features": [
                  "각 서버는 독립적으로 집중된 기능 제공",
                  "여러 서버를 원활하게 조합 가능",
                  "공유 프로토콜로 상호 운용성 구현",
                  "모듈식 설계로 확장성 지원"
                ]
              },
              {
                "title": "보안 격리",
                "description": "서버는 전체 대화를 읽거나 다른 서버를 '볼 수' 없어야 합니다",
                "features": [
                  "서버는 필요한 컨텍스트 정보만 수신",
                  "전체 대화 기록은 호스트에 유지",
                  "각 서버 연결은 격리 상태 유지",
                  "서버 간 상호작용은 호스트가 제어",
                  "호스트 프로세스가 보안 경계 실행"
                ]
              },
              {
                "title": "점진적 향상",
                "description": "서버와 클라이언트 기능은 점진적으로 추가할 수 있습니다",
                "features": [
                  "핵심 프로토콜은 최소 필수 기능 제공",
                  "필요에 따라 추가 기능 협상 가능",
                  "서버와 클라이언트 독립적 발전",
                  "프로토콜 설계가 미래 확장 지원",
                  "하위 호환성 유지"
                ]
              }
            ]
          },
          "messages": {
            "title": "프로토콜 기초",
            "description": "MCP의 모든 메시지는 JSON-RPC 2.0 사양을 따라야 합니다. 프로토콜은 세 가지 유형의 메시지를 정의합니다:",
            "items": [
              {
                "title": "요청",
                "description": "클라이언트에서 서버로, 또는 그 반대로 전송할 수 있는 양방향 메시지",
                "features": [
                  "문자열 또는 정수 유형의 ID를 포함해야 함",
                  "ID는 null이 될 수 없음",
                  "동일한 세션에서 요청자는 동일한 ID를 재사용할 수 없음",
                  "선택적 매개변수 객체를 포함할 수 있음"
                ],
                "codeExample": {
                  "title": "요청 예시",
                  "code": {
                    "jsonrpc": "2.0",
                    "id": "string | number",
                    "method": "string",
                    "param?": {  
                      "key": "value"
                    }
                  }
                }
              },
              {
                "title": "응답",
                "description": "요청에 대한 응답으로 전송됨",
                "features": [
                  "해당 요청과 동일한 ID를 포함해야 함",
                  "result 또는 error 중 하나를 설정해야 하며, 둘 다 설정할 수 없음",
                  "오류 코드는 정수여야 함",
                  "선택적 결과 데이터를 포함할 수 있음"
                ],
                "codeExample": {
                  "title": "응답 예시",
                  "code": {
                    "jsonrpc": "2.0",
                    "id": "string | number",
                    "result?": {
                      "[key: string]": "unknown"
                    },
                    "error?": {
                      "code": "number",
                      "message": "string",
                      "data?": "unknown"
                    }
                  }
                }
              },
              {
                "title": "알림",
                "description": "응답이 필요 없는 단방향 메시지로, 클라이언트에서 서버로 또는 그 반대로 전송 가능",
                "features": [
                  "ID 필드를 포함할 수 없음",
                  "상태 업데이트 및 이벤트 알림에 사용",
                  "선택적 매개변수 객체를 포함할 수 있음",
                  "통신 오버헤드 감소, 비동기 작업 지원"
                ],
                "codeExample": {
                  "title": "알림 예시",
                  "code": {
                    "jsonrpc": "2.0",
                    "method": "string",
                    "params?": {
                      "[key: string]": "unknown"
                    }
                  }
                }
              }
            ]
          },
          "lifecycle": {
            "title": "수명 주기",
            "description": "MCP는 클라이언트-서버 연결에 대한 엄격한 수명 주기를 정의하여 올바른 기능 협상 및 상태 관리를 보장합니다.",
            "diagram": "sequenceDiagram\n    participant 클라이언트\n    participant 서버\n\n    Note over 클라이언트,서버: 초기화 단계\n    activate 클라이언트\n    클라이언트->>+서버: 초기화 요청\n    서버-->>클라이언트: 초기화 응답\n    클라이언트--)서버: 초기화 완료 알림\n\n    Note over 클라이언트,서버: 작동 단계\n    rect rgb(200, 220, 250)\n        note over 클라이언트,서버: 정상 프로토콜 작동\n    end\n\n    Note over 클라이언트,서버: 종료\n    클라이언트--)-서버: 연결 해제\n    deactivate 서버\n    Note over 클라이언트,서버: 연결 종료됨",
            "phases": [
              {
                "title": "초기화 단계",
                "description": "초기화 단계는 클라이언트와 서버 간의 첫 번째 상호작용이어야 합니다. 이 단계에서 양측은:",
                "features": [
                  "프로토콜 버전 호환성 설정",
                  "기능 교환 및 협상",
                  "구현 세부 정보 공유"
                ],
                "codeExamples": [
                  {
                    "title": "초기화 요청",
                    "code": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "method": "initialize",
                      "params": {
                        "protocolVersion": "2024-11-05",
                        "capabilities": {
                          "roots": {
                            "listChanged": true
                          },
                          "sampling": {}
                        },
                        "clientInfo": {
                          "name": "ExampleClient",
                          "version": "1.0.0"
                        }
                      }
                    }
                  },
                  {
                    "title": "초기화 응답",
                    "code": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": {
                        "protocolVersion": "2024-11-05",
                        "capabilities": {
                          "logging": {},
                          "prompts": {
                            "listChanged": true
                          },
                          "resources": {
                            "subscribe": true,
                            "listChanged": true
                          },
                          "tools": {
                            "listChanged": true
                          }
                        },
                        "serverInfo": {
                          "name": "ExampleServer",
                          "version": "1.0.0"
                        }
                      }
                    }
                  },
                  {
                    "title": "초기화 완료 알림",
                    "code": {
                      "jsonrpc": "2.0",
                      "method": "initialized"
                    }
                  }
                ]
              },
              {
                "title": "버전 협상",
                "description": "초기화 요청에서, 클라이언트는 지원하는 프로토콜 버전을 전송해야 합니다.",
                "features": [
                  "클라이언트는 지원하는 최신 버전을 전송해야 합니다",
                  "서버는 동일한 버전 또는 지원하는 다른 버전을 응답해야 합니다",
                  "클라이언트가 서버의 버전을 지원하지 않으면 연결을 종료해야 합니다"
                ]
              },
              {
                "title": "기능 협상",
                "description": "클라이언트와 서버는 세션 기간 동안 사용 가능한 선택적 프로토콜 기능을 결정합니다.",
                "capabilities": {
                  "client": [
                    {
                      "name": "roots",
                      "description": "파일 시스템 루트 디렉토리 기능 제공"
                    },
                    {
                      "name": "sampling",
                      "description": "LLM 샘플링 요청 지원"
                    },
                    {
                      "name": "experimental",
                      "description": "비표준 실험적 기능 지원"
                    }
                  ],
                  "server": [
                    {
                      "name": "prompts",
                      "description": "프롬프트 템플릿 제공"
                    },
                    {
                      "name": "resources",
                      "description": "읽을 수 있는 리소스 제공"
                    },
                    {
                      "name": "tools",
                      "description": "호출 가능한 도구 제공"
                    },
                    {
                      "name": "logging",
                      "description": "구조화된 로그 메시지 발행"
                    },
                    {
                      "name": "experimental",
                      "description": "비표준 실험적 기능 지원"
                    }
                  ]
                }
              },
              {
                "title": "작동 단계",
                "description": "작동 단계에서, 클라이언트와 서버는 협상된 기능을 교환합니다.",
                "features": [
                  "협상된 프로토콜 버전 준수",
                  "성공적으로 협상된 기능만 사용"
                ]
              },
              {
                "title": "종료 단계",
                "description": "종료 단계에서, 연결은 우아하게 종료됩니다.",
                "features": [
                  "클라이언트는 연결 종료 알림을 보냅니다",
                  "서버는 연결을 닫습니다",
                  "관련 리소스 정리"
                ]
              }
            ]
          },
          "transports": {
            "title": "전송 메커니즘",
            "description": "MCP는 현재 두 가지 표준 클라이언트-서버 통신 전송 메커니즘을 정의합니다: stdio(표준 입출력) 및 기반 SSE의 HTTP。클라이언트는 stdio를 지원해야 합니다. 또한, 클라이언트와 서버는 플러그인 가능한 방식으로 사용자 정의 전송 메커니즘을 구현할 수 있습니다.",
            "revision": "프로토콜 개정: 2024-11-05",
            "stdio": {
              "title": "표준 입출력（stdio）",
              "description": "stdio 전송 메커니즘에서:",
              "features": [
                "클라이언트는 MCP 서버를 하위 프로세스로 시작합니다",
                "서버는 표준 입력（stdin）을 통해 JSON-RPC 메시지를 수신하고 표준 출력（stdout）에 응답을 작성합니다",
                "메시지는 줄바꿈 문자로 구분되며 줄바꿈 문자를 포함할 수 없습니다",
                "서버는 UTF-8 문자열을 표준 오류（stderr）에 작성할 수 있으며, 클라이언트는 이 로그를 캡쳐, 전달 또는 무시할 수 있습니다",
                "서버는 표준 출력에 유효한 MCP 메시지가 아닌 것을 작성할 수 없습니다",
                "클라이언트는 서버의 표준 입력에 유효한 MCP 메시지가 아닌 것을 작성할 수 없습니다"
              ],
              "diagram": "sequenceDiagram\n    participant 客户端\n    participant 服务进程\n\n    客户端->>+服务进程: 启动子进程\n    loop 消息交换\n        客户端->>服务进程: 写入标准输入\n        服务进程-->>客户端: 写入标准输出\n        服务进程-->>客户端: 可选：标准错误日志\n    end\n    客户端->>服务进程: 关闭标准输入，终止子进程\n    deactivate 服务进程"
            },
            "sse": {
              "title": "SSE 기반 HTTP",
              "description": "SSE 전송 메커니즘에서, 서버는 독립적인 프로세스로 실행되며 여러 클라이언트 연결을 처리할 수 있습니다",
              "endpoints": {
                "title": "서버는 두 개의 엔드포인트를 제공해야 합니다:",
                "items": [
                  {
                    "title": "SSE 엔드포인트",
                    "description": "클라이언트가 연결을 설정하고 서버에서 메시지를 수신하는 데 사용됩니다"
                  },
                  {
                    "title": "HTTP POST 엔드포인트",
                    "description": "클라이언트가 서버에 메시지를 보내는 데 사용됩니다"
                  }
                ]
              },
              "requirements": [
                "클라이언트가 연결할 때, 서버는 클라이언트가 메시지를 보내는 URI를 포함한 endpoint 이벤트를 전송해야 합니다",
                "모든 후속 클라이언트 메시지는 이 엔드포인트에 HTTP POST 요청으로 보내야 합니다",
                "서버 메시지는 SSE message 이벤트로 전송되며, 이벤트 데이터에 JSON 형식으로 인코딩됩니다"
              ],
              "diagram": "sequenceDiagram\n    participant 클라이언트\n    participant 서버\n\n    클라이언트->>+서버: SSE 연결 열기\n    서버-->>클라이언트: endpoint 이벤트\n    loop 메시지 교환\n        클라이언트->>서버: HTTP POST 메시지\n        서버-->>클라이언트: SSE message 이벤트\n    end\n    클라이언트->>서버: SSE 연결 닫기\n    deactivate 서버"
            },
            "custom": {
              "title": "사용자 정의 전송 메커니즘",
              "description": "클라이언트와 서버는 특정 요구 사항을 충족하기 위해 추가 사용자 정의 전송 메커니즘을 구현할 수 있습니다. 프로토콜은 전송 메커니즘과 독립적이며, 양방향 메시지 교환을 지원하는 모든 통신 채널에서 구현할 수 있습니다.",
              "requirements": [
                "사용자 정의 전송 메커니즘을 지원하는 구현자는 MCP 정의의 JSON-RPC 메시지 형식과 수명 주기 요구 사항을 보장해야 합니다",
                "사용자 정의 전송 메커니즘은 특정 연결 설정 및 메시지 교환 패턴을 기록해야 하며, 이를 통해 상호 운용성을 지원할 수 있습니다"
              ]
            }
          },
          "capabilities": {
            "title": "핵심 기능",
            "clientTitle": "클라이언트 기능",
            "serverTitle": "서버 기능",
            "items": [
              "언어 모델과 컨텍스트 정보 공유",
              "AI 시스템에 도구 및 기능 노출",
              "조합 가능한 통합 및 워크플로우 구축",
              "리소스에 대한 안전하고 제어된 접근 구현"
            ]
          },
          "communication": {
            "title": "통신 메커니즘",
            "description": "JSON-RPC 2.0을 사용한 표준화된 메시지 교환",
            "features": [
              "상태 유지 연결",
              "기능 협상",
              "안전한 데이터 전송",
              "오류 처리"
            ]
          }
        },
        "baseProtocol": {
          "title": "기본 프로토콜",
          "subtitle": "JSON-RPC 2.0 기반",
          "description": "MCP는 JSON-RPC 2.0 프로토콜을 기반으로 하며, 표준화된 요청-응답 패턴을 제공합니다",
          "methods": {
            "initialize": {
              "title": "Initialize",
              "description": "연결 초기화 및 기능 협상"
            },
            "ready": {
              "title": "Ready",
              "description": "서버 준비 완료 알림"
            },
            "shutdown": {
              "title": "Shutdown",
              "description": "연결 종료"
            }
          }
        },
        "serverFeatures": {
          "title": "서버 기능",
          "description": "서버는 MCP를 통해 언어 모델에 컨텍스트를 추가하기 위한 기본 구성 요소를 제공하며, 컨텍스트 관리를 위한 세 가지 기본 요소를 제공합니다: 프롬프트, 리소스 및 도구.",
          "primitives": {
            "headers": ["요소", "제어", "설명", "예시"],
            "items": [
              {
                "primitive": "프롬프트",
                "control": "시스템",
                "description": "모델의 행동과 역할 정의",
                "example": "당신은 전문 코드 리뷰어입니다"
              },
              {
                "primitive": "리소스",
                "control": "사용자",
                "description": "추가 컨텍스트 정보 제공",
                "example": "코드 파일, 문서"
              },
              {
                "primitive": "도구",
                "control": "시스템/사용자",
                "description": "모델의 기능 확장",
                "example": "코드 검색, 파일 편집"
              }
            ]
          },
          "features": [
            {
              "title": "리소스 관리",
              "description": "AI 모델에 컨텍스트와 데이터 제공",
              "items": [
                "다양한 리소스 유형 지원",
                "동적 리소스 로딩",
                "리소스 수명 주기 관리"
              ]
            },
            {
              "title": "도구 통합",
              "description": "AI 모델의 기능 범위 확장",
              "items": [
                "유연한 도구 등록 메커니즘",
                "도구 호출 권한 제어",
                "비동기 도구 실행 지원"
              ]
            },
            {
              "title": "컨텍스트 제어",
              "description": "AI 모델 동작의 정확한 제어",
              "items": [
                "시스템 수준 프롬프트 관리",
                "동적 컨텍스트 업데이트",
                "다중 대화 상태 유지"
              ]
            }
          ]
        }
      }
    },
    "Common": {
      "loading": "로딩 중...",
      "error": "오류가 발생했습니다",
      "retry": "재시도",
      "close": "닫기",
      "save": "저장",
      "cancel": "취소",
      "delete": "삭제",
      "edit": "편집",
      "view": "보기",
      "more": "더 보기",
      "back": "뒤로",
      "next": "다음",
      "previous": "이전",
      "finish": "완료",
      "continue": "계속",
      "submit": "제출",
      "confirm": "확인",
      "success": "성공",
      "failed": "실패",
      "copied": "복사됨",
      "learnMore": "더 알아보기"
    },
    "Servers": {
      "title": "Claude MCP 서버 디렉토리",
      "description": "최고의 인기 있는 Claude MCP 서버 찾기",
      "viewAll": "모두 보기",
      "noServers": "서버를 찾을 수 없습니다",
      "author": "작성자",
      "links": "링크",
      "homepage": "홈페이지",
      "repository": "저장소",
      "tags": "태그",
      "capabilities": "기능",
      "filterByTags": "태그로 필터링",
      "allTags": "전체",
      "search": "서버 검색",
      "searchPlaceholder": "키워드 입력...",
      "serverDetails": "서버 세부 정보",
      "notFound": "서버를 찾을 수 없습니다",
      "notFoundDescription": "요청한 서버를 찾을 수 없습니다.",
      "submitServer": "서버 제출하기",
      "relatedServers": "관련 서버"
    },
    "Docs": {
      "meta": {
          "title": "MCP 문서",
          "description": "Claude MCP 프로토콜의 공식 문서 플랫폼으로, 개발자 리소스와 커뮤니티 협업을 제공합니다.",
          "og": {
            "title": "MCP 문서", 
            "description": "Claude MCP 프로토콜의 공식 문서 플랫폼으로, 개발자 리소스와 커뮤니티 협업을 제공합니다."
          },
          "twitter": {
            "title": "MCP 문서",
            "description": "Claude MCP 프로토콜의 공식 문서 플랫폼으로, 개발자 리소스와 커뮤니티 협업을 제공합니다."
          }
        },
      "landingPage": {
        "title": "Model Context Protocol (MCP) 문서 센터",
        "welcome": "Model Context Protocol (MCP) 문서 센터에 오신 것을 환영합니다. 왼쪽 탐색 메뉴에서 특정 문서 주제를 선택하거나 아래의 개요를 계속 읽어보세요.",
        "whatIs": {
          "title": "Model Context Protocol이란 무엇인가요?",
          "description": "Model Context Protocol (MCP)은 Anthropic Claude가 출시한 오픈소스 프로토콜로, AI 모델과 개발 환경 간의 통합된 컨텍스트 상호작용 표준을 구축하기 위한 것입니다. 표준화된 컨텍스트 정보 접근 방식을 제공함으로써, MCP는 AI 모델이 코드를 더 잘 이해하고 처리할 수 있게 하며, 개발자가 단일 표준을 통해 AI 애플리케이션과 다양한 데이터 소스를 연결할 수 있도록 합니다."
        },
        "features": {
          "title": "주요 기능 및 특징",
          "unifiedInterface": {
            "title": "통합 인터페이스",
            "description": "표준화된 API 인터페이스를 제공하여 AI와 다양한 컨텍스트 정보 간의 상호작용을 단순화합니다"
          },
          "seamlessIntegration": {
            "title": "원활한 통합",
            "description": "복잡한 적응 없이 기존 개발 워크플로우에 쉽게 통합됩니다"
          },
          "multiSource": {
            "title": "다중 소스 데이터 지원",
            "description": "코드 저장소, 문서 등 다양한 소스에서 컨텍스트 정보를 가져올 수 있습니다"
          },
          "contextManagement": {
            "title": "지능형 컨텍스트 관리",
            "description": "컨텍스트 정보 전달을 최적화하여 AI 모델의 이해 및 생성 품질을 향상시킵니다"
          },
          "extensibility": {
            "title": "확장성 설계",
            "description": "유연한 아키텍처로 새로운 데이터 소스와 기능을 추가할 수 있습니다"
          }
        },
        "useCases": {
          "title": "사용 사례",
          "codeDevelopment": {
            "title": "코드 관리 및 개발",
            "description": "Claude 데스크톱 애플리케이션과 MCP 프로토콜을 통해 AI는 사용자가 GitHub 프로젝트를 관리하고 프로젝트 생성부터 코드 요청 제출까지의 복잡한 작업을 쉽게 완료할 수 있도록 도와줍니다."
          },
          "documentProcessing": {
            "title": "지능형 문서 처리",
            "description": "MCP는 AI가 다양한 문서 형식을 이해하고 처리하여 더 정확한 콘텐츠 분석과 생성 제안을 제공할 수 있게 합니다."
          },
          "knowledgeIntegration": {
            "title": "지식 베이스 통합",
            "description": "기업 내부 지식 베이스를 AI 모델과 원활하게 연결하여 기업 특정 지식을 기반으로 한 지능형 답변과 제안을 제공합니다."
          },
          "devTools": {
            "title": "개발 도구 향상",
            "description": "IDE 및 개발 도구에 지능형 지원 기능을 제공하여 코드 컨텍스트에 따라 더 정확한 제안과 자동 완성을 제공합니다."
          }
        },
        "whyChoose": {
          "title": "왜 MCP를 선택해야 하나요?",
          "description": "MCP 프로토콜의 등장으로 LLM(대규모 언어 모델) 애플리케이션이 데이터에 연결하기 어려운 문제를 해결할 수 있게 되었습니다. 각 데이터 소스에 대한 사용자 정의 통합 코드를 작성할 필요 없이 최신 모델이 더 나은, 더 관련성 있는 응답을 생성할 수 있게 되었으며, 단일 MCP 프로토콜로 여러 데이터 소스와의 연결을 처리할 수 있습니다."
        },
        "getStarted": {
          "title": "시작하기",
          "description": "MCP 사용을 시작하려면 왼쪽 탐색 메뉴의 \"입문 가이드\" 섹션에서 <introduction>소개</introduction>를 확인하세요. 빠르게 시작하고 싶은 사용자를 위해 <quickstart>빠른 시작 가이드</quickstart>를 제공합니다."
        },
        "cta": {
          "title": "MCP 탐색을 시작할 준비가 되셨나요?",
          "subtitle": "MCP를 프로젝트에 통합하는 방법에 대한 자세한 문서를 확인하세요.",
          "exploreButton": "탐색 시작",
          "githubButton": "GitHub 저장소"
        }
      },
      "nav": {
        "getting_started": "시작 가이드",
        "base-dev": "기초 개발",
        "python": "Python",
        "guides": "사용 가이드",
        "advanced": "고급 주제",
        "previous": "이전 페이지",
        "next": "다음 페이지",
        "items": {
          "introduction": "소개",
          "architecture": "아키텍처",
          "installation": "설치",
          "protocol": "프로토콜",
          "transports-2025-03-26": "전송 프로토콜",
          "streamable-http": "Streamable HTTP",
          "quickstart": "빠른 시작",
          "getting_started": "시작 가이드",
          "write-ts-server": "MCP 서버",
          "write-ts-client": "MCP 클라이언트",
          "use-llm-dev-mcp": "Cursor/LLM을 사용한 MCP 개발",
          "sampling-usage": "MCP의 Sampling 기능",
          "dev-sse-mcp": "SSE 타입 MCP 서비스 개발",
          "mcp-py-sdk-basic": "MCP Python SDK를 사용한 MCP 서버 및 클라이언트 개발",
          "mcp-py-sdk-deep": "MCP Python SDK로 SSE 및 Streamable HTTP 프로토콜 구현",
          "mcp-authorization": "MCP Authorization 인증 메커니즘",
          "resources": "리소스 관리",
          "tools": "도구 사용",
          "messages": "메시지 처리",
          "security": "보안",
          "deployment": "배포",
          "configuration": "구성"
        }
      }
    },
    "Clients": {
      "title": "Claude MCP 클라이언트",
      "description": "모델 컨텍스트 프로토콜(Claude MCP)을 구현한 다양한 클라이언트 애플리케이션 탐색",
      "details": "클라이언트 상세정보",
      "noClients": "클라이언트를 찾을 수 없음",
      "viewAll": "모든 클라이언트 보기",
      "backToClients": "클라이언트 목록으로 돌아가기",
      "author": "개발자",
      "published": "출시일",
      "platforms": "지원 플랫폼",
      "visitHomepage": "홈페이지 방문",
      "viewRepository": "코드 저장소 보기",
      "platformWindows": "Windows",
      "platformMac": "macOS",
      "platformLinux": "Linux",
      "platformWeb": "웹 버전",
      "platformIos": "iOS",
      "platformAndroid": "Android",
      "notFound": "클라이언트를 찾을 수 없음",
      "notFoundDescription": "요청한 클라이언트를 찾을 수 없습니다",
      "search": "클라이언트 검색",
      "searchPlaceholder": "키워드를 입력하여 검색..."
    },
    "Blog": {
      "common": {
        "searchPlaceholder": "검색 기사...",
        "allCategories": "전체 카테고리",
        "noResults": "조건에 맞는 기사를 찾을 수 없습니다",
        "readMore": "더 읽기",
        "backToBlog": "블로그 목록으로 돌아가기",
        "shareArticle": "이 기사 공유",
        "copyLink": "링크 복사",
        "linkCopied": "링크가 복사됨",
        "relatedPosts": "관련 기사",
        "scrollToTop": "맨 위로 이동",
        "readingTime": "읽는 시간",
        "minutesRead": "분 읽기",
        "tableOfContents": "목차",
        "loadingToc": "목차 로딩 중..."
      },
      "meta": {
        "title": "블로그",
        "description": "기술, AI, 프로그래밍 및 최선의 실무 최신 기사와 견해 탐색"
      },
      "page": {
        "title": "블로그 인사이트",
        "description": "기술, 인공지능, 프로그래밍 및 최선의 실무 최신 기사와 견해 탐색, 더 스마트한 애플리케이션 구축 돕기"
      }
    },
    "Tools": {
      "title": "Claude MCP 도구",
      "description": "개발 및 검사를 위한 MCP 도구 탐색 및 테스트",
      "playground": {
        "title": "MCP 실험실",
        "description": "다양한 MCP Server 시험 환경"
      },
      "inspector": {
        "title": "MCP Inspector",
        "description": "온라인 테스트용 MCP 공식 디버깅 도구"
      },
      "openPlayground": "실험실 열기",
      "openInspector": "인스펙터 열기"
    },
    "Resources": {
      "meta": {
        "title": "리소스 - Claude MCP",
        "description": "Claude MCP 커뮤니티의 관련 제품 및 유용한 도구 탐색"
      },
      "title": "커뮤니티 리소스",
      "description": "Claude MCP 커뮤니티 회원들이 만든 유용한 제품과 도구를 발견하세요",
      "products": {
        "gptsora": "OpenAI의 Sora 2 모델을 사용하여 간단한 텍스트 설명으로 충격적인, 실제 비디오를 몇 초 만에 만듭니다.",
        "genspark": "모든 것을 다 할 수 있는 슈퍼 에이전트 AI 워크스페이스",
        "asmr": "편안한 AI 생성 ASMR 비디오 제작",
        "dripo": "AI 기반 콘텐츠 제작 플랫폼",
        "tomarkdown": "모든 문서를 Markdown 형식으로 변환",
        "rooms": "AI 기반 가상 공간 디자인 도구",
        "humanize": "AI 생성 텍스트를 더 자연스럽고 인간적으로 만들기",
        "manus": "글쓰기 및 콘텐츠 제작을 위한 AI 어시스턴트",
        "extensions": "강력한 확장 프로그램으로 데스크톱 경험 향상",
        "calculator": "다양한 계산을 지원하는 종합 온라인 계산기",
        "compress": "빠르고 효율적인 파일 압축 도구",
        "a2a": "에이전트 간 통신 프로토콜",
        "deepsite": "AI 기반 웹사이트 빌더",
        "invincible": "맞춤형 Invincible 스타일 타이틀 카드 생성",
        "colorblock": "Color Block Jam 퍼즐 게임 레벨 생성기"
      },
      "disclaimer": "이러한 리소스는 커뮤니티 회원들이 제공합니다. 각 사이트를 방문하여 제공 내용에 대해 자세히 알아보세요."
    }
  }